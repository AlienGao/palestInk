(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{470:function(s,t,e){"use strict";e.r(t);var n=e(12),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("React中正常 state 更新、UI 交互，都离不开用户的事件，比如点击事件，表单输入等，React 是采用事件合成的形式，每一个事件都是由 React 事件系统统一调度的，那么 State 批量更新正是和事件系统息息相关的。\n以下为一个点击事件的例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("export default class index extends React.Component{\n    state = { number:0 }\n    handleClick= () => {\n          this.setState({ number:this.state.number + 1 },()=>{   console.log( 'callback1', this.state.number)  })\n          console.log(this.state.number)\n          this.setState({ number:this.state.number + 1 },()=>{   console.log( 'callback2', this.state.number)  })\n          console.log(this.state.number)\n          this.setState({ number:this.state.number + 1 },()=>{   console.log( 'callback3', this.state.number)  })\n          console.log(this.state.number)\n    }\n    render(){\n        return <div>\n            { this.state.number }\n            <button onClick={ this.handleClick }  >number++</button>\n        </div>\n    }\n} \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("输出结果为：0 0 0 callback1 1 callback2 1 callback3 1\n其中的执行过程如下：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlienGao/image-store@main/blog/image.7id6kz67rbg0.png",alt:"React事件系统流程"}}),s._v("\n通过开启批量更新开关来处理点击事件，在批量更新条件下合并state结果。")]),s._v(" "),e("p",[s._v("但是异步操作会破坏React的批量更新规则。比如下面的例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(()=>{\n    this.setState({ number:this.state.number + 1 },()=>{   console.log( 'callback1', this.state.number)  })\n    console.log(this.state.number)\n    this.setState({ number:this.state.number + 1 },()=>{    console.log( 'callback2', this.state.number)  })\n    console.log(this.state.number)\n    this.setState({ number:this.state.number + 1 },()=>{   console.log( 'callback3', this.state.number)  })\n    console.log(this.state.number)\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("输出结果为：callback1 1 1 callback2 2 2 callback3 3 3\n此时事件系统的执行过程变为：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlienGao/image-store@main/blog/image.3pug7wpx3200.png",alt:"异步操作中事件处理流程"}})]),s._v(" "),e("p",[s._v("所以批量更新规则被打破。")]),s._v(" "),e("p",[s._v("那么，如何在如上异步环境下，继续开启批量更新模式呢？")]),s._v(" "),e("p",[s._v("React-Dom 中提供了批量更新方法 unstable_batchedUpdates，可以去手动批量更新，可以将上述 setTimeout 里面的内容做如下修改:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import ReactDOM from 'react-dom'\nconst { unstable_batchedUpdates } = ReactDOM\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(()=>{\n    unstable_batchedUpdates(()=>{\n        this.setState({ number:this.state.number + 1 })\n        console.log(this.state.number)\n        this.setState({ number:this.state.number + 1})\n        console.log(this.state.number)\n        this.setState({ number:this.state.number + 1 })\n        console.log(this.state.number) \n    })\n})\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("输出结果： 0 , 0 , 0 , callback1 1 , callback2 1 ,callback3 1")]),s._v(" "),e("p",[s._v("React-dom 提供了 flushSync ，flushSync 可以将回调函数中的更新任务，放在一个较高的优先级中。React 设定了很多不同优先级的更新任务。如果一次更新任务在 flushSync 回调函数内部，那么将获得一个较高优先级的更新。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("handerClick=()=>{\n    setTimeout(()=>{\n        this.setState({ number: 1  })\n    })\n    this.setState({ number: 2  })\n    ReactDOM.flushSync(()=>{\n        this.setState({ number: 3  })\n    })\n    this.setState({ number: 4  })\n}\nrender(){\n   console.log(this.state.number)\n   return ...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("在这个例子中通过ReactDOM的flushSync方法提高了回调函数函数的优先级，所以最先执行number = 3。然后进行批量更新，合并了number = 2 和number = 4，结果输出4。最后执行异步操作，返回1。")])])}),[],!1,null,null,null);t.default=a.exports}}]);