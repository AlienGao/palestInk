(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{448:function(n,t,e){"use strict";e.r(t);var a=e(12),o=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("根据公司项目需要，将老项目的视频监控功能移植到新项目中，正好有机会实践一下qiankun框架。根据"),e("a",{attrs:{href:"https://qiankun.umijs.org/zh",target:"_blank",rel:"noopener noreferrer"}},[n._v("官网"),e("OutboundLink")],1),n._v("介绍，应用qiankun对技术栈没有限制，由于qiankun的Api非常简洁，主应用与子应用进行简单配置，就能完成改造。最后分享一个根据官网搭建的qiankun微应用，实现父应用与子应用的�通信，若是qiankun启动，兄弟应用可以通过修改父应用的全局状态来通信。")]),n._v(" "),e("p",[n._v("项目地址："),e("a",{attrs:{href:"https://github.com/AlienGao/qiankun-demo",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/AlienGao/qiankun-demo"),e("OutboundLink")],1)]),n._v(" "),e("h2",{attrs:{id:"主应用配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主应用配置"}},[n._v("#")]),n._v(" 主应用配置")]),n._v(" "),e("p",[e("em",[n._v("main/src/micro-apps.js")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("import shared from './shared'\n\nconst mircoApps = [\n  {\n    name: 'react-app',\n    entry: process.env.REACT_APP_REACT_PATH,\n    activeRule: '/app-react',\n  },\n  {\n    name: 'vue-app',\n    entry: process.env.REACT_APP_VUE_PATH,\n    activeRule: '/app-vue',\n  }\n]\n\n// console.log(process.env, 'vue_path')\n\nconst apps = mircoApps.map(app => {\n  return {\n    ...app,\n    // 子应用容器\n    container: '#container',\n    props: {\n      // 暴露给子应用的方法\n      getGlobalState: shared.getGlobalState,\n      setGlobalState: shared.setGlobalState\n    }\n  }\n})\n\nexport default apps\n")])])]),e("p",[e("em",[n._v("main/src/shared/index.js")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("import { initGlobalState } from 'qiankun';\n\nconst initialState = { taskList: [] };\n\nconst actions = initGlobalState(initialState);\n\nactions.onGlobalStateChange((newState, prev) => {\n  // state: 变更后的状态; prev 变更前的状态\n  console.log('main change', JSON.stringify(newState), JSON.stringify(prev));\n\n  for (let key in newState) {\n    initialState[key] = newState[key]\n  }\n}, true);\n\n// 定义一个获取state的方法下发到子应用\nactions.getGlobalState = (key) => {\n  // 有key，表示取globalState下的某个子级对象\n  // 无key，表示取全部\n  return key ? initialState[key] : initialState\n}\n\n// actions.setGlobalState(state);\n\nexport default actions;\n")])])]),e("p",[n._v("这两个文件主要配置了子应用的端口，容器和需要用到的方法，通过将setGloablState暴露给子应用，可以做到通过一个子应用修改全局状态再同步给另一个子应用。")]),n._v(" "),e("p",[n._v("最后，在父应用的入口文件注册子应用。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("import reportWebVitals from './reportWebVitals';\nimport { registerMicroApps, start, setDefaultMountApp } from 'qiankun';\nimport microApps from './micro-apps'\n\nconst apps = microApps\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nregisterMicroApps(apps, {\n  beforeLoad: [app => {\n    console.log(`${app.name}-beforeLoad`)\n  }],\n  beforeMount: [app => {\n    console.log(`${app.name}-beforeMount`)\n  }],\n  afterMount: [app => {\n    console.log(`${app.name}-afterMount`)\n  }],\n  beforeUnmount: [app => {\n    console.log(`${app.name}-beforeUnmount`)\n  }],\n  afterUnmount: [app => {\n    console.log(`${app.name}-beforeUnmount`)\n  }]\n});\n\nsetDefaultMountApp('/app-vue')\n// 启动 qiankun\nstart();\n")])])]),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlienGao/image-store@main/blog/image.1b6hntpvy0m.png",alt:"效果图"}}),n._v("\n上面为效果图，上方为主应用，下方位微应用容器。")]),n._v(" "),e("h2",{attrs:{id:"子应用配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子应用配置"}},[n._v("#")]),n._v(" 子应用配置")]),n._v(" "),e("p",[n._v("子应用首先需要在入口文件处配置三个钩子函数用于qiankun识别生命周期。")]),n._v(" "),e("p",[e("em",[n._v("vue-app/src/main.js")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("export async function bootstrap() {\n  console.log('[vue] vue app bootstraped');\n}\nexport async function mount(props) {\n  console.log('[vue] props from main framework', props);\n  globalRegister(store, props)\n  render(props);\n}\nexport async function unmount() {\n  instance.$destroy();\n  instance.$el.innerHTML = '';\n  instance = null;\n  router = null;\n}\n")])])]),e("p",[n._v("其次在Vue子应用mount时期，通过globalRegister函数初始化了全局状态。")]),n._v(" "),e("p",[e("em",[n._v("vue-app/src/shared/index.js")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("/**\n * \n * @param {vuex实例} store \n * @param {qiankun下发的props} props \n */\nfunction registerGlobalModule(store, props = {}) {\n  if (!store || !store.hasModule) {\n    return;\n  }\n\n  // 获取初始化的state\n  const initState = props.getGlobalState && props.getGlobalState() || {};\n  // 将父应用的数据存储到子应用中，命名空间固定为global\n  if (!store.hasModule('global')) {\n    const globalModule = {\n      namespaced: true,\n      state: initState,\n      actions: {\n        // 子应用改变state并通知父应用\n        setGlobalState({ commit }, payload) {\n          commit('setGlobalState', payload);\n          commit('emitGlobalState', payload);\n        },\n        // 初始化，只用于mount时同步父应用的数据\n        initGlobalState({ commit }, payload) {\n          commit('setGlobalState', payload);\n        },\n      },\n      mutations: {\n        setGlobalState(state, payload) {\n          // eslint-disable-next-line\n          state = Object.assign(state, payload);\n        },\n        // 通知父应用\n        emitGlobalState(state) {\n          if (props.setGlobalState) {\n            // console.log(state, 'emitGlobalState')\n            props.setGlobalState(state);\n          }\n        },\n      },\n    };\n    store.registerModule('global', globalModule);\n  } else {\n    // 每次mount时，都同步一次父应用数据\n    store.dispatch('global/initGlobalState', initState);\n  }\n}\n\nexport default registerGlobalModule;\n")])])]),e("p",[n._v("若Vue应用没有global Modal，则根据全局状态创建一个。其中能够通过父应用传递的setGlobalState方法改变父应用状态。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("  computed: {\n    taskList() {\n      return this.$store.state.global.taskList;\n    }\n  },\nmethods: {\n    onChange(task) {\n      this.$store.dispatch('global/setGlobalState', task)\n      // this.microSetGlobalState(this.$store.state.global)\n        }\n  },\n")])])]),e("p",[n._v("Vue应用可以通过计算属性获取最新的父应用状态。其中有两种方式修改父应用状态，一种是通过dispatch 'global/setGlobalState' action，另一种是直接通过父应用传递的setGlobalState方法修改，该方法需要在Vue的入口文件中设置Vue实例的全局方法。")]),n._v(" "),e("p",[e("em",[n._v("vue-app/src/main.js")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("  const { container, getGlobalState } = props;\n  Vue.prototype.getGlobalState = getGlobalState\n")])])]),e("p",[n._v("点击父应用添加任务，在Vue应用中进行双向绑定。\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlienGao/image-store@main/blog/image.6113sfc4p34.png",alt:"此处输入图片的描述"}})]),n._v(" "),e("p",[n._v("在Vue子应用中修改任务\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlienGao/image-store@main/blog/image.1jh5t7uspl40.png",alt:"此处输入图片的描述"}})]),n._v(" "),e("p",[n._v("能够在兄弟应用中展示最新的任务内容\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlienGao/image-store@main/blog/image.1aablsy30qrk.png",alt:"此处输入图片的描述"}})]),n._v(" "),e("p",[n._v("最后未来让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置。")]),n._v(" "),e("p",[e("em",[n._v("vue-app/vue.config.js")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("const { name } = require('./package');\nmodule.exports = {\n  devServer: {\n    // open: true,\n    // hot: true,\n    // compress: true,\n    // disableHostCheck: true,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n  },\n  configureWebpack: {\n    output: {\n      library: `${name}-[name]`,\n      libraryTarget: 'umd', // 把微应用打包成 umd 库格式\n      jsonpFunction: `webpackJsonp_${name}`,\n    },\n  },\n};\n")])])]),e("p",[n._v("🎉彩蛋🎉：在项目根目录中配置了npm-run-all的命令，可以很方便的启动主应用与子应用。")])])}),[],!1,null,null,null);t.default=o.exports}}]);